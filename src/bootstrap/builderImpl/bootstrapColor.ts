import { nearestColorFrom } from "../../common/nearest-color";
import { nearestOpacity } from "../conversionTables";

export const retrieveTopFill = (
  fills: ReadonlyArray<Paint> | PluginAPI["mixed"]
): Paint | undefined => {
  if (fills && fills !== figma.mixed && fills.length > 0) {
    // on Figma, the top layer is always at the last position
    // reverse, then try to find the first layer that is visible, if any.
    return [...fills].reverse().find((d) => d.visible !== false);
  }
};

// retrieve the SOLID color for bootstrap
export const bootstrapColorFromFills = (
  fills: ReadonlyArray<Paint> | PluginAPI["mixed"],
  kind: string
): string => {
  // kind can be text, bg, border...
  // [when testing] fills can be undefined

  const fill = retrieveTopFill(fills);
  if (fill && fill.type === "SOLID") {
    return bootstrapSolidColor(fill.color, fill.opacity, kind);
  } else if (
    fill &&
    (fill.type === "GRADIENT_LINEAR" ||
      fill.type === "GRADIENT_ANGULAR" ||
      fill.type === "GRADIENT_RADIAL" ||
      fill.type === "GRADIENT_DIAMOND")
  ) {
    if (fill.gradientStops.length > 0) {
      return bootstrapSolidColor(
        fill.gradientStops[0].color,
        fill.opacity,
        kind
      );
    }
  }
  return "";
};

export const bootstrapSolidColor = (
  color: RGB,
  opacity: number | undefined,
  kind: string
): string => {
  // example: text-opacity-50
  // ignore the 100. If opacity was changed, let it be visible.
  const opacityProp =
    opacity !== 1.0
      ? `${kind}-opacity-${nearestOpacity(opacity ?? 1.0)}`
      : null;

  // example: text-red-500
  const colorProp = `${kind}-${getBootstrapFromFigmaRGB(color)}`;

  // if fill isn't visible, it shouldn't be painted.
  return [colorProp, opacityProp].filter((d) => d).join(" ");
};

// AutoGenerated for Bootstrap 5
export const bootstrapColors: Record<string, string> = {
  "white": "#fff",
  "gray-100": "#f8f9fa",
  "gray-200": "#e9ecef",
  "gray-300": "#dee2e6",
  "gray-400": "#ced4da",
  "gray-500": "#adb5bd",
  "gray-600": "#6c757d",
  "gray-700": "#495057",
  "gray-800": "#343a40",
  "gray-900": "#212529",
  "black": "#000",
  "blue": "#0d6efd",
  "indigo": "#6610f2",
  "purple": "#6f42c1",
  "pink": "#d63384",
  "red": "#dc3545",
  "orange": "#fd7e14",
  "yellow": "#ffc107",
  "green": "#198754",
  "teal": "#20c997",
  "cyan": "#0dcaf0"
};

export const bootstrapNearestColor = nearestColorFrom(
  Object.keys(bootstrapColors)
);

// figma uses r,g,b in [0, 1], while nearestColor uses it in [0, 255]
export const getBootstrapFromFigmaRGB = (color: RGB): string => {
  const colorMultiplied = {
    r: color.r * 255,
    g: color.g * 255,
    b: color.b * 255,
  };

  return bootstrapColors[bootstrapNearestColor(colorMultiplied)];
};

export const getBootstrapColor = (color: string | RGB): string => {
  return bootstrapColors[bootstrapNearestColor(color)];
};
